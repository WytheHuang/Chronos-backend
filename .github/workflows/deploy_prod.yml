name: Deploy to production's ECR/ECS

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy_build_push_ecr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v2
        with:
          python-version: "3.11"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.PROD_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f DockerFile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # deploy_django_ecs:
  #   runs-on: ubuntu-latest
  #   needs: deploy_build_push_ecr
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ap-northeast-1

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     - name: download task definition
  #       run: |
  #         aws ecs describe-task-definition --task-definition mvp-django --query taskDefinition > task-definition.json

  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: task-definition.json
  #         container-name: backend
  #         image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.PROD_ECR_REPOSITORY }}:${{ github.sha }}

  #     - name: Deploy Amazon ECS task definition
  #       id: deploy
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ${{ steps.task-def.outputs.task-definition }}
  #         cluster: Chronos-Cluster
  #         service: Chronos-Service
  #         wait-for-service-stability: true
